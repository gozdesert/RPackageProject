if (!is.null(npc)){
if(npc >  D){
stop("The number of principal components must be less than the number of columns of X")
}
}
#First we find Khat for our case we choose Rpointwise
mylist = latentcor(X, types = types) #use latentcor funct to calculate the correlation matrix
Khat = mylist$Rpointwise
#now we smooth Khat to get Ktilde
# we use the code coming from fpca.sc function
dia.Khat = diag(Khat)
diag(Khat) = NA  #we ignore diagonal elements first
#Take the upper triangular part of Khat
ut.Khat = upper.tri(Khat, diag = TRUE)
ut.Khat[2, 1] <- ut.Khat[ncol(Khat), ncol(Khat) - 1] <- TRUE
#next step we need to calculate
cov.count = matrix(0, D, D)
#construct a matrix just taking the elements not equal to NA
for (i in 1:I) {
obs.points = which(!is.na(X[i, ]))
cov.count[obs.points, obs.points] = cov.count[obs.points, obs.points] + 1
}
usecov.count <- cov.count
usecov.count[2, 1] <- usecov.count[ncol(Khat), ncol(Khat) - 1] <- 0
usecov.count <- as.vector(usecov.count)[ut.Khat]
use <- as.vector(ut.Khat)
vKhat <- as.vector(Khat)[use]   #make it vector
#since we will use argument values NULL default, we take the part where we generate argument values
argvals = seq(0, 1, length = D)
row.vec = rep(argvals, each = D)[use]
col.vec = rep(argvals, times = D)[use]
mCov = gam(vKhat ~ te(row.vec, col.vec, k = nbasis), weights = usecov.count)
Ktilde = matrix(NA, D, D) #to get the smooth cor mat we create a matrix
spred = rep(argvals, each = D)[upper.tri(Ktilde, diag = TRUE)]
tpred =  rep(argvals, times = D)[upper.tri(Ktilde, diag = TRUE)]
smVCov = predict(mCov, newdata = data.frame(row.vec = spred, col.vec = tpred))
Ktilde[upper.tri(Ktilde, diag = TRUE)] = smVCov
Ktilde[lower.tri(Ktilde)] = t(Ktilde)[lower.tri(Ktilde)]
#now we obtain Ktilde and we want to extract the efunctions from Ktilde
# Here the number of evalues or eigenfunctions is depend on the choice of pve or npc
#I need to write another function for quadWeights
w = my_quadWeights(argvals = argvals, method = "trapezoidal")
Wsqrt <- diag(sqrt(w))
Winvsqrt <- diag(1/(sqrt(w)))
V <- Wsqrt %*% Ktilde %*% Wsqrt
evalues = eigen(V, symmetric = TRUE, only.values = TRUE)$values
evalues = replace(evalues, which(evalues <= 0), 0)
# npc = prespecified value for the number of principal components. default = NULL
# pve = proportion of variance explained: used to choose the number of principal components.
npc = ifelse(is.null(npc), min(which(cumsum(evalues)/sum(evalues) > pve)), npc)
#now we can find eigenfunctions of Ktilde matrix
efunctions = matrix(Winvsqrt %*% eigen(V, symmetric = TRUE)$vectors[, seq(len = npc)], nrow = D, ncol = npc)
#evalues = eigen(V, symmetric = TRUE, only.values = TRUE)$values[1:npc]
#Kdoubletilde = efunctions %*% tcrossprod(diag(evalues, nrow = npc, ncol = npc), efunctions)
X <- matrix(rnorm(1000), ncol = 50)
if(!is.matrix(X)){
stop("X must be a matrix!")
}
I = nrow(X)
D = ncol(X)
#compatibility checks
if (!is.null(npc)){
if(npc >  D){
stop("The number of principal components must be less than the number of columns of X")
}
}
#First we find Khat for our case we choose Rpointwise
mylist = latentcor(X, types = types) #use latentcor funct to calculate the correlation matrix
Khat = mylist$Rpointwise
#now we smooth Khat to get Ktilde
# we use the code coming from fpca.sc function
dia.Khat = diag(Khat)
diag(Khat) = NA  #we ignore diagonal elements first
#Take the upper triangular part of Khat
ut.Khat = upper.tri(Khat, diag = TRUE)
ut.Khat[2, 1] <- ut.Khat[ncol(Khat), ncol(Khat) - 1] <- TRUE
#next step we need to calculate
cov.count = matrix(0, D, D)
#construct a matrix just taking the elements not equal to NA
for (i in 1:I) {
obs.points = which(!is.na(X[i, ]))
cov.count[obs.points, obs.points] = cov.count[obs.points, obs.points] + 1
}
usecov.count <- cov.count
usecov.count[2, 1] <- usecov.count[ncol(Khat), ncol(Khat) - 1] <- 0
usecov.count <- as.vector(usecov.count)[ut.Khat]
use <- as.vector(ut.Khat)
vKhat <- as.vector(Khat)[use]   #make it vector
#since we will use argument values NULL default, we take the part where we generate argument values
argvals = seq(0, 1, length = D)
row.vec = rep(argvals, each = D)[use]
col.vec = rep(argvals, times = D)[use]
mCov = gam(vKhat ~ te(row.vec, col.vec, k = nbasis), weights = usecov.count)
Ktilde = matrix(NA, D, D) #to get the smooth cor mat we create a matrix
spred = rep(argvals, each = D)[upper.tri(Ktilde, diag = TRUE)]
tpred =  rep(argvals, times = D)[upper.tri(Ktilde, diag = TRUE)]
smVCov = predict(mCov, newdata = data.frame(row.vec = spred, col.vec = tpred))
Ktilde[upper.tri(Ktilde, diag = TRUE)] = smVCov
Ktilde[lower.tri(Ktilde)] = t(Ktilde)[lower.tri(Ktilde)]
#now we obtain Ktilde and we want to extract the efunctions from Ktilde
# Here the number of evalues or eigenfunctions is depend on the choice of pve or npc
#I need to write another function for quadWeights
w = my_quadWeights(argvals = argvals, method = "trapezoidal")
Wsqrt <- diag(sqrt(w))
Winvsqrt <- diag(1/(sqrt(w)))
V <- Wsqrt %*% Ktilde %*% Wsqrt
evalues = eigen(V, symmetric = TRUE, only.values = TRUE)$values
evalues = replace(evalues, which(evalues <= 0), 0)
# npc = prespecified value for the number of principal components. default = NULL
# pve = proportion of variance explained: used to choose the number of principal components.
npc = ifelse(is.null(npc), min(which(cumsum(evalues)/sum(evalues) > pve)), npc)
#now we can find eigenfunctions of Ktilde matrix
efunctions = matrix(Winvsqrt %*% eigen(V, symmetric = TRUE)$vectors[, seq(len = npc)], nrow = D, ncol = npc)
#evalues = eigen(V, symmetric = TRUE, only.values = TRUE)$values[1:npc]
#Kdoubletilde = efunctions %*% tcrossprod(diag(evalues, nrow = npc, ncol = npc), efunctions)
X <- matrix(rnorm(1000), ncol = 100)
if(!is.matrix(X)){
stop("X must be a matrix!")
}
I = nrow(X)
D = ncol(X)
#compatibility checks
if (!is.null(npc)){
if(npc >  D){
stop("The number of principal components must be less than the number of columns of X")
}
}
#First we find Khat for our case we choose Rpointwise
mylist = latentcor(X, types = types) #use latentcor funct to calculate the correlation matrix
Khat = mylist$Rpointwise
#now we smooth Khat to get Ktilde
# we use the code coming from fpca.sc function
dia.Khat = diag(Khat)
diag(Khat) = NA  #we ignore diagonal elements first
#Take the upper triangular part of Khat
ut.Khat = upper.tri(Khat, diag = TRUE)
ut.Khat[2, 1] <- ut.Khat[ncol(Khat), ncol(Khat) - 1] <- TRUE
#next step we need to calculate
cov.count = matrix(0, D, D)
#construct a matrix just taking the elements not equal to NA
for (i in 1:I) {
obs.points = which(!is.na(X[i, ]))
cov.count[obs.points, obs.points] = cov.count[obs.points, obs.points] + 1
}
usecov.count <- cov.count
usecov.count[2, 1] <- usecov.count[ncol(Khat), ncol(Khat) - 1] <- 0
usecov.count <- as.vector(usecov.count)[ut.Khat]
use <- as.vector(ut.Khat)
vKhat <- as.vector(Khat)[use]   #make it vector
#since we will use argument values NULL default, we take the part where we generate argument values
argvals = seq(0, 1, length = D)
row.vec = rep(argvals, each = D)[use]
col.vec = rep(argvals, times = D)[use]
mCov = gam(vKhat ~ te(row.vec, col.vec, k = nbasis), weights = usecov.count)
Ktilde = matrix(NA, D, D) #to get the smooth cor mat we create a matrix
spred = rep(argvals, each = D)[upper.tri(Ktilde, diag = TRUE)]
tpred =  rep(argvals, times = D)[upper.tri(Ktilde, diag = TRUE)]
smVCov = predict(mCov, newdata = data.frame(row.vec = spred, col.vec = tpred))
Ktilde[upper.tri(Ktilde, diag = TRUE)] = smVCov
Ktilde[lower.tri(Ktilde)] = t(Ktilde)[lower.tri(Ktilde)]
#now we obtain Ktilde and we want to extract the efunctions from Ktilde
# Here the number of evalues or eigenfunctions is depend on the choice of pve or npc
#I need to write another function for quadWeights
w = my_quadWeights(argvals = argvals, method = "trapezoidal")
Wsqrt <- diag(sqrt(w))
Winvsqrt <- diag(1/(sqrt(w)))
V <- Wsqrt %*% Ktilde %*% Wsqrt
evalues = eigen(V, symmetric = TRUE, only.values = TRUE)$values
evalues = replace(evalues, which(evalues <= 0), 0)
# npc = prespecified value for the number of principal components. default = NULL
# pve = proportion of variance explained: used to choose the number of principal components.
npc = ifelse(is.null(npc), min(which(cumsum(evalues)/sum(evalues) > pve)), npc)
#now we can find eigenfunctions of Ktilde matrix
efunctions = matrix(Winvsqrt %*% eigen(V, symmetric = TRUE)$vectors[, seq(len = npc)], nrow = D, ncol = npc)
#evalues = eigen(V, symmetric = TRUE, only.values = TRUE)$values[1:npc]
#Kdoubletilde = efunctions %*% tcrossprod(diag(evalues, nrow = npc, ncol = npc), efunctions)
X <- matrix(rnorm(1000), ncol = 100)
if(!is.matrix(X)){
stop("X must be a matrix!")
}
I = nrow(X)
D = ncol(X)
#compatibility checks
if (!is.null(npc)){
if(npc >  D){
stop("The number of principal components must be less than the number of columns of X")
}
}
#First we find Khat for our case we choose Rpointwise
mylist = latentcor(X, types = types) #use latentcor funct to calculate the correlation matrix
Khat = mylist$Rpointwise
#now we smooth Khat to get Ktilde
# we use the code coming from fpca.sc function
dia.Khat = diag(Khat)
diag(Khat) = NA  #we ignore diagonal elements first
#Take the upper triangular part of Khat
ut.Khat = upper.tri(Khat, diag = TRUE)
ut.Khat[2, 1] <- ut.Khat[ncol(Khat), ncol(Khat) - 1] <- TRUE
#next step we need to calculate
cov.count = matrix(0, D, D)
#construct a matrix just taking the elements not equal to NA
for (i in 1:I) {
obs.points = which(!is.na(X[i, ]))
cov.count[obs.points, obs.points] = cov.count[obs.points, obs.points] + 1
}
usecov.count <- cov.count
usecov.count[2, 1] <- usecov.count[ncol(Khat), ncol(Khat) - 1] <- 0
usecov.count <- as.vector(usecov.count)[ut.Khat]
use <- as.vector(ut.Khat)
vKhat <- as.vector(Khat)[use]   #make it vector
#since we will use argument values NULL default, we take the part where we generate argument values
argvals = seq(0, 1, length = D)
row.vec = rep(argvals, each = D)[use]
col.vec = rep(argvals, times = D)[use]
mCov = gam(vKhat ~ te(row.vec, col.vec, k = nbasis), weights = usecov.count)
Ktilde = matrix(NA, D, D) #to get the smooth cor mat we create a matrix
spred = rep(argvals, each = D)[upper.tri(Ktilde, diag = TRUE)]
tpred =  rep(argvals, times = D)[upper.tri(Ktilde, diag = TRUE)]
smVCov = predict(mCov, newdata = data.frame(row.vec = spred, col.vec = tpred))
Ktilde[upper.tri(Ktilde, diag = TRUE)] = smVCov
Ktilde[lower.tri(Ktilde)] = t(Ktilde)[lower.tri(Ktilde)]
#now we obtain Ktilde and we want to extract the efunctions from Ktilde
# Here the number of evalues or eigenfunctions is depend on the choice of pve or npc
#I need to write another function for quadWeights
w = my_quadWeights(argvals = argvals, method = "trapezoidal")
Wsqrt <- diag(sqrt(w))
Winvsqrt <- diag(1/(sqrt(w)))
V <- Wsqrt %*% Ktilde %*% Wsqrt
evalues = eigen(V, symmetric = TRUE, only.values = TRUE)$values
evalues = replace(evalues, which(evalues <= 0), 0)
# npc = prespecified value for the number of principal components. default = NULL
# pve = proportion of variance explained: used to choose the number of principal components.
npc = ifelse(is.null(npc), min(which(cumsum(evalues)/sum(evalues) > pve)), npc)
#now we can find eigenfunctions of Ktilde matrix
efunctions = matrix(Winvsqrt %*% eigen(V, symmetric = TRUE)$vectors[, seq(len = npc)], nrow = D, ncol = npc)
#evalues = eigen(V, symmetric = TRUE, only.values = TRUE)$values[1:npc]
#Kdoubletilde = efunctions %*% tcrossprod(diag(evalues, nrow = npc, ncol = npc), efunctions)
output1 = fpcaCor(X, pve = 0.99)
library(latentcor)
set.seed(326435)
Mydata.list = gen_data(n = 30, types = rep("con", 50))
X = Mydata.list$X
head(X, n = 6)
output1 = fpcaCor(X, pve = 0.99)
NPC = output1$npc
print(NPC)
library(fpcaCor)
library(fpcaCor)
library(fpcaCor)
library(latentcor)
set.seed(326435)
Mydata.list = gen_data(n = 30, types = rep("con", 50))
X = Mydata.list$X
head(X, n = 6)
output1 = fpcaCor(X, pve = 0.99)
output1
?gen`-data`
?gen_data`
?gen_data
Mydata.list$plotX
set.seed(326435)
Mydata.list = gen_data(n = 30, types = rep("con", 50), showplot = T)
Mydata.list$plotX
X = Mydata.list$X
X
output1 = fpcaCor(X, pve = 0.99)
output1
output1 = fpcaCor(X, pve = 0.1)
output1
output1 = fpcaCor(X, pve = 0.99999999999)
output1
for (i in 1:1000){
X = matrix(rnorm(1000), ncol = 50)
output1 = fpcaCor(X, pve = 0.99)
}
i
X
output1 = fpcaCor(X, pve = 0.99)
Mydata.list = gen_data(n = 30, types = rep("con", 50))
X = Mydata.list$X
output1 = fpcaCor(X, pve = 0.99)
X = matrix(rnorm(1000), ncol = 50)
output1 = fpcaCor(X, pve = 0.99)
X = matrix(rnorm(1000), ncol = 50)
output1 = fpcaCor(X, pve = 0.99)
X = matrix(rnorm(1000), ncol = 50)
output1 = fpcaCor(X, pve = 0.99)
X = matrix(rnorm(1000), ncol = 50)
output1 = fpcaCor(X, pve = 0.99)
X = matrix(rnorm(1000), ncol = 50)
output1 = fpcaCor(X, pve = 0.99)
X = matrix(rnorm(1000), ncol = 50)
output1 = fpcaCor(X, pve = 0.99)
X = matrix(rnorm(1000), ncol = 50)
output1 = fpcaCor(X, pve = 0.99)
X = matrix(rnorm(1000), ncol = 50)
output1 = fpcaCor(X, pve = 0.99)
X = matrix(rnorm(1000), ncol = 50)
output1 = fpcaCor(X, pve = 0.99)
X = matrix(rnorm(1000), ncol = 50)
output1 = fpcaCor(X, pve = 0.99)
X = matrix(rnorm(1000), ncol = 50)
output1 = fpcaCor(X, pve = 0.99)
X = matrix(rnorm(1000), ncol = 50)
output1 = fpcaCor(X, pve = 0.99)
X = matrix(rnorm(1000), ncol = 50)
output1 = fpcaCor(X, pve = 0.99)
X = matrix(rnorm(1000), ncol = 50)
output1 = fpcaCor(X, pve = 0.99)
X = matrix(rnorm(1000), ncol = 50)
output1 = fpcaCor(X, pve = 0.99)
for (i in 1:1000){
X = matrix(rnorm(1000), ncol = 50)
output1 = fpcaCor(X, pve = 0.99)
}
for (i in 1:1000){
X2 = gen_data(n = 30, types = rep("con", 50))
output1 = fpcaCor(X2, pve = 0.99)
}
for (i in 1:1000){
X2 = gen_data(n = 30, types = rep("con", 50))
output1 = fpcaCor(X2$X, pve = 0.99)
}
for (i in 1:1000){
X2 = gen_data(n = 30, types = rep("con", 50))
output1 = fpcaCor(X2$X, pve = 0.99)
print(i)
}
for (i in 1:100){
X2 = gen_data(n = 30, types = rep("con", 50))
output1 = fpcaCor(X2$X, pve = 0.99)
print(i)
}
for (i in 1:100){
X = matrix(rnorm(1000), ncol = 50)
output1 = fpcaCor(X, pve = 0.99)
print(i)
}
plot(X[, 1], X[, 2])
plot(X2[, 1], X2[, 2])
plot(X2$X[, 1], X2$X[, 2])
plot(X2$X[, 1], X2$X[, 50])
cov(X)
eigen(cov(X)$values)
eigen(cov(X))$values
eigen(cor(X))$values
cor(X)[1:5, 1:5]
X = matrix(rnorm(10000), ncol = 50)
cor(X)[1:5, 1:5]
X = matrix(rnorm(100000), ncol = 50)
cor(X)[1:5, 1:5]
output1 = fpcaCor(X, pve = 0.99)
for (i in 1:100){
X = matrix(rnorm(100000), ncol = 50)
output1 = fpcaCor(X, pve = 0.99)
print(i)
}
eigen(cor(X))$values
output1 = fpcaCor(X, pve = 0.99)
eigen(cor(X))$values
eigen(cov(X))$values
library(latentcor)
set.seed(326435)
Mydata.list = gen_data(n = 30, types = rep("con", 50))
X = Mydata.list$X
head(X, n = 6)
output1 = fpcaCor(X, pve = 0.99)
output1 = fpcaCor(X, pve = 0.9999)
library(latentcor)
set.seed(326435)
Mydata.list = gen_data(n = 30, types = rep("con", 50))
X = Mydata.list$X
head(X, n = 6)
X = Mydata.list$X
head(X, n = 6)
NPC = output1$npc
print(NPC)
output1 = fpcaCor(X, pve = 0.99)
NPC = output1$npc
print(NPC)
output1 = fpcaCor(X, pve = 0.9999)
NPC = output1$npc
print(NPC)
ncol(X)
output3 = fpcaCor(X, npc = 10)
eigenfuncs= output3$eigenfuncs
print(eigenfuncs)
head(iris)
iris_mat <- iris[, -5]
iris_result = fpcaCor(iris_mat, pve = 0.99)
iris_mat <- as.matrix(iris[, -5])
iris_result = fpcaCor(iris_mat, pve = 0.99)
iris_mat <- as.matrix(iris[, -5])
iris_result = fpcaCor(iris_mat, nbasis = 5, pve = 0.99)
iris_mat <- as.matrix(iris[, -5])
iris_result = fpcaCor(iris_mat, nbasis = 3, pve = 0.99)
iris_mat <- as.matrix(iris[, -5])
iris_result = fpcaCor(iris_mat, nbasis = 2, pve = 0.99)
iris_mat <- as.matrix(iris[, -5])
iris_result = fpcaCor(iris_mat, nbasis = 1, pve = 0.99)
dim(iris_mat)
iris_mat <- as.matrix(iris[, -5])
iris_mat[, 5] = iris_mat[, 1] + 3 * iris_mat[, 2]
iris_mat <- as.matrix(iris[, -5])
iris_mat = rbind(iris_mat, iris_mat[, 1] + 3 * iris_mat[, 2])
iris_mat = rbind(iris_mat, iris_mat[, 5] - iris_mat[, 3])
iris_mat
iris_mat <- as.matrix(iris[, -5])
iris_mat = rbind(iris_mat, iris_mat[, 1] + 3 * iris_mat[, 2])
iris_mat[, 1] + 3 * iris_mat[, 2]
rbind(iris_mat, iris_mat[, 1] + 3 * iris_mat[, 2])
iris_mat <- as.matrix(iris[, -5])
iris_mat = cbind(iris_mat, iris_mat[, 1] + 3 * iris_mat[, 2])
iris_mat = cbind(iris_mat, iris_mat[, 5] - iris_mat[, 3])
iris_mat = cbind(iris_mat, iris_mat[, 2] + iris_mat[, 3] + 20 * iris_mat[, 4])
iris_result = fpcaCor(iris_mat, nbasis = 1, pve = 0.99)
iris_mat <- as.matrix(iris[, -5])
iris_mat = cbind(iris_mat, iris_mat[, 1] + 3 * iris_mat[, 2])
iris_mat = cbind(iris_mat, iris_mat[, 5] - iris_mat[, 3])
iris_mat = cbind(iris_mat, iris_mat[, 2] + iris_mat[, 3] + 20 * iris_mat[, 4])
iris_result = fpcaCor(iris_mat, nbasis = 3, pve = 0.8)
iris_result
iris_mat <- as.matrix(iris[, -5])
#iris_mat = cbind(iris_mat, iris_mat[, 1] + 3 * iris_mat[, 2])
#iris_mat = cbind(iris_mat, iris_mat[, 5] - iris_mat[, 3])
#iris_mat = cbind(iris_mat, iris_mat[, 2] + iris_mat[, 3] + 20 * iris_mat[, 4])
iris_result = fpcaCor(iris_mat, nbasis = 3, pve = 0.8)
iris_mat <- as.matrix(iris[, -5])
#iris_mat = cbind(iris_mat, iris_mat[, 1] + 3 * iris_mat[, 2])
#iris_mat = cbind(iris_mat, iris_mat[, 5] - iris_mat[, 3])
#iris_mat = cbind(iris_mat, iris_mat[, 2] + iris_mat[, 3] + 20 * iris_mat[, 4])
iris_result = fpcaCor(iris_mat, nbasis = 3, pve = 0.7)
iris_mat <- as.matrix(iris[, -5])
#iris_mat = cbind(iris_mat, iris_mat[, 1] + 3 * iris_mat[, 2])
#iris_mat = cbind(iris_mat, iris_mat[, 5] - iris_mat[, 3])
#iris_mat = cbind(iris_mat, iris_mat[, 2] + iris_mat[, 3] + 20 * iris_mat[, 4])
iris_result = fpcaCor(iris_mat, nbasis = 3, pve = 0.5)
iris_mat <- as.matrix(iris[, -5])
#iris_mat = cbind(iris_mat, iris_mat[, 1] + 3 * iris_mat[, 2])
#iris_mat = cbind(iris_mat, iris_mat[, 5] - iris_mat[, 3])
#iris_mat = cbind(iris_mat, iris_mat[, 2] + iris_mat[, 3] + 20 * iris_mat[, 4])
iris_result = fpcaCor(iris_mat, nbasis = 2, pve = 0.8)
iris_mat <- as.matrix(iris[, -5])
#iris_mat = cbind(iris_mat, iris_mat[, 1] + 3 * iris_mat[, 2])
#iris_mat = cbind(iris_mat, iris_mat[, 5] - iris_mat[, 3])
#iris_mat = cbind(iris_mat, iris_mat[, 2] + iris_mat[, 3] + 20 * iris_mat[, 4])
iris_result = fpcaCor(iris_mat, nbasis = 2, pve = 0.7)
iris_mat <- as.matrix(iris[, -5])
#iris_mat = cbind(iris_mat, iris_mat[, 1] + 3 * iris_mat[, 2])
#iris_mat = cbind(iris_mat, iris_mat[, 5] - iris_mat[, 3])
#iris_mat = cbind(iris_mat, iris_mat[, 2] + iris_mat[, 3] + 20 * iris_mat[, 4])
iris_result = fpcaCor(iris_mat, nbasis = 2, pve = 0.5)
iris_mat <- as.matrix(iris[, -5])
iris_mat = cbind(iris_mat, iris_mat[, 1] + 3 * iris_mat[, 2])
iris_mat = cbind(iris_mat, iris_mat[, 5] - iris_mat[, 3])
iris_mat = cbind(iris_mat, iris_mat[, 2] + iris_mat[, 3] + 20 * iris_mat[, 4])
iris_result = fpcaCor(iris_mat, nbasis = 3, pve = 0.9)
iris_mat <- as.matrix(iris[, -5])
iris_mat = cbind(iris_mat, iris_mat[, 1] + 3 * iris_mat[, 2])
iris_mat = cbind(iris_mat, iris_mat[, 5] - iris_mat[, 3])
iris_mat = cbind(iris_mat, iris_mat[, 2] + iris_mat[, 3] + 20 * iris_mat[, 4])
iris_result = fpcaCor(iris_mat, nbasis = 3, pve = 0.95)
iris_mat <- as.matrix(iris[, -5])
iris_mat = cbind(iris_mat, iris_mat[, 1] + 3 * iris_mat[, 2])
iris_mat = cbind(iris_mat, iris_mat[, 5] - iris_mat[, 3])
iris_mat = cbind(iris_mat, iris_mat[, 2] + iris_mat[, 3] + 20 * iris_mat[, 4])
iris_result = fpcaCor(iris_mat, nbasis = 3, pve = 0.99)
iris_result
use_readme_rmd()
usethis::use_readme_rmd()
library(fpcaCor)
## basic example code
### Generate data using the function "gaussian_copula_cor" :
n = 33  # number of samples
ntime = 50  # number of time points
Mydata.X = gaussian_copula_cor(n = 33, ntime = 50)$Y   #A n x ntime matrix for the Gaussian latent model
fpcaCor(X = Mydata.X, pve = 0.99)
library(fpcaCor)
## basic example code
### Generate data using the function "gaussian_copula_cor" :
n = 33  # number of samples
ntime = 20  # number of time points
Mydata.X = gaussian_copula_cor(n = 33, ntime = 20)$Y   #A n x ntime matrix for the Gaussian latent model
fpcaCor(X = Mydata.X, pve = 0.99)
library(fpcaCor)
## basic example code
set.seed(46933)
### Generate data using the function "gaussian_copula_cor" :
n = 33  # number of samples
ntime = 20  # number of time points
Mydata.X = gaussian_copula_cor(n = 33, ntime = 20)$Y   #A n x ntime matrix for the Gaussian latent model
fpcaCor(X = Mydata.X, pve = 0.99)
library(fpcaCor)
## basic example code
set.seed(46933)
### Generate data using the function "gaussian_copula_cor" :
n = 33  # number of samples
ntime = 20  # number of time points
Mydata.X = gaussian_copula_cor(n = 33, ntime = 20)$Y   #A n x ntime matrix for the Gaussian latent model
fpcaCor(X = Mydata.X, pve = 0.999)
library(fpcaCor)
## basic example code
set.seed(46933)
### Generate data using the function "gaussian_copula_cor" :
n = 33  # number of samples
ntime = 20  # number of time points
Mydata.X = gaussian_copula_cor(n = 33, ntime = 20)$Y   #A n x ntime matrix for the Gaussian latent model
fpcaCor(X = Mydata.X, pve = 0.999999)
devtools::document()
library(fpcaCor)
library(fpcaCor)
library(fpcaCor)
